module Aufgabe5 where

-- Gültige Graphen:
-- Gerichtete Graphen mit kostenbenannten Kannten.
-- Höchstens eine gerichtete Kante zw. je zwei Knoten je Richtung (laut Forum).
-- Alle Knoten fortlaufend nummeriert beginnend bei 0.
-- Alle Kantenkosten > 0.

type Cost = Integer
type Vertex = Integer
type MaxVertexNo = Integer

type Inp = (MaxVertexNo, [(Vertex, Vertex, Cost)])

-- Aufgabe 1 ------------------------------------------------------------------------------
isValid :: Inp -> Bool
isValid (x, _)
    | x < 0 = False
isValid (x, xs)
    | toInt x < length xs = False
    | someCostsLowerThanZero xs = False
    | edgesNotUnique xs xs = False
    | otherwise = True

toInt = fromIntegral

someCostsLowerThanZero :: [(Vertex, Vertex, Cost)] -> Bool
someCostsLowerThanZero xs
    | length [ z | (x, y, z) <- xs, (toInt z) <= 0 ] > 0 = True
    | otherwise = False
    
edgesNotUnique :: [(Vertex, Vertex, Cost)] -> [(Vertex, Vertex, Cost)] -> Bool
edgesNotUnique xs ys
    | length [ 1 | (x, y, _) <- xs, (r, s, _) <- ys, x == r && y == s ] > length xs = True
    | otherwise = False

-- Aufgabe 2 ------------------------------------------------------------------------------

-- Adjazenzlisten
data ALgraph = ALg [(Vertex, [(Vertex, Cost)])] deriving (Eq, Show)
-- Adjazenzmatrizen
data AMgraph = AMg [Row] deriving (Eq, Show)
-- Kantenlisten
data ELgraph = ELg MaxVertexNo [Edge] deriving (Eq, Show)

type Row = [Integer]
type Edge = (Vertex, Cost, Vertex)

-- a) --------------------------------------------------------------------------------------
inp2el :: Inp -> ELgraph
inp2el (maxVertexNo, xs) = ELg maxVertexNo (toEdges xs)

toEdges :: [(Vertex, Vertex, Cost)] -> [(Vertex, Cost, Vertex)]
toEdges [] = []
toEdges ((v1, v2, c):xs) = (v1, c, v2):toEdges xs

-- b) --------------------------------------------------------------------------------------
al2am :: ALgraph -> AMgraph
al2am alGraph = convertToAMGraph
    where convertToAMGraph = AMg $ buildAM nrOfNodes allEdges
          nrOfNodes = [0..((lengthOf alGraph) - 1)]
          allEdges = (filterEdgesFor nrOfNodes alGraph)

lengthOf (ALg []) = 0
lengthOf (ALg (x:xs)) = 1 + lengthOf (ALg xs)

buildAM _ [] = []
buildAM [] _ = []
buildAM nrOfNodes (edgesOfFirstVerdict:xs) = setCostsForVerdict nrOfNodes edgesOfFirstVerdict : buildAM nrOfNodes xs
              
setCostsForVerdict [] _ = []
setCostsForVerdict (n:ns) edges
    | ifEdgeDoesNotExist = zeroCosts : (setCostsForVerdict ns edges)
    | otherwise = costOfEdge : (setCostsForVerdict ns edges)
        where ifEdgeDoesNotExist = getEdge n edges == (0, 0)
              zeroCosts = 0
              costOfEdge = snd (getEdge n edges)

getEdge _ [] = (0, 0)
getEdge n (x:xs) 
    | n == (fst x) = x
    | otherwise = getEdge n xs

filterEdgesFor [] _ = []
filterEdgesFor (x:xs) alGraph = nodeList : filterEdgesFor xs alGraph
    where nodeList = nodesOf x alGraph

nodesOf :: Vertex -> ALgraph -> [(Vertex, Cost)]
nodesOf v (ALg x)
    | length nodes > 0 = nodes !! 0
    | otherwise = []
        where nodes = [xs | (x, xs) <- x, x == v ]
    
-- c) --------------------------------------------------------------------------------------
al2el :: ALgraph -> ELgraph
al2el x = ELg 0 []

-- d) --------------------------------------------------------------------------------------
am2al :: AMgraph -> ALgraph
am2al x = ALg []

-- e) --------------------------------------------------------------------------------------
am2el :: AMgraph -> ELgraph
am2el x = ELg 0 []

-- f) --------------------------------------------------------------------------------------
el2al :: ELgraph -> ALgraph
el2al (ELg max edges) = ALg (toAl [0..max] edges)

toAl _ [] = []
toAl [] _ = []
toAl (x:xs) edges = (x, (getNeighbours x edges)) : (toAl xs edges)

getNeighbours x edges
    | (length result) == 0 = []
    | otherwise = result
        where result = [ (v2, c) | (v1, c, v2) <- edges, v1 == x ]

-- g) --------------------------------------------------------------------------------------
el2am :: ELgraph -> AMgraph
el2am x = AMg []

-- Test cases must be deleted ------------------------------------------
testall = and [testinp]

-- 1.
tinp_all = [tinp_1, tinp_2, tinp_3, tinp_4]

tinp_1 = (4,[(1,2,500), (0,3,100), (0,2,200)]) -- okay
tinp_2 = (2,xs) -- zu viele Kanten
	where (_,xs) = tinp_1
tinp_3 = (maxno,(2,1,400):xs) -- zwei Kanten zwischen zwei Knoten
	where (maxno,xs) = tinp_1
tinp_4 = (maxno,(1,3,-400):xs) -- negative Kosten
	where (maxno,xs) = tinp_1

testinp = [True,False,True,False] == [isValid x | x <- tinp_all]
    
-- 2.: Beachten Sie, dass das Resultat i.a. nicht eindeutig festgelegt ist!
testkonv = and tkonv_all

tkonv_all = [tkonv_a, tkonv_b, tkonv_f]-- tkonv_b]--, tkonv_c, tkonv_d, tkonv_e, tkonv_f, tkonv_g]

tkonv_a = inp2el tinp_1 == (ELg 4 [(1,500,2),(0,100,3),(0,200,2)])
tkonv_b = al2am (el2al (inp2el tinp_1)) == (AMg [[0,0,200,100,0],[0,0,500,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]])
tkonv_f = el2al (inp2el tinp_1) == (ALg [(0,[(3,100),(2,200)]),(1,[(2,500)]),(2,[]),(3,[]),(4,[])])